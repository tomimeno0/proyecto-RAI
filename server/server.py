from flask import Flask, request, jsonify
import cohere
import os
from server.consultas_apps import obtener_info_app, sugerir_eliminacion

# Tu clave API de Cohere (mejor en variable de entorno)
cohere_api_key = os.getenv("COHERE_API_KEY", "NoDkh6iQtPSLALt4S9QoOKSpfaKnhv2zwyPGjbMU")
client = cohere.Client(cohere_api_key)

app = Flask(__name__)

@app.route('/orden', methods=['POST'])
def procesar_orden():
    data = request.get_json()
    orden = data.get('command', '').strip()
    print(f"üì• Orden recibida: {orden}")

    # ‚îÄ‚îÄ Si quer√©s consultar la base antes de enviar a Cohere:
    # Por ejemplo, si la orden menciona una app:
    if "info app" in orden.lower():
        # extra√© el nombre de la app de la orden de alguna forma
        nombre_app = orden.split("info app",1)[1].strip()
        return jsonify({"response": obtener_info_app(nombre_app)})

    if "sugerir eliminaci√≥n" in orden.lower():
        nombre_app = orden.split("sugerir eliminaci√≥n",1)[1].strip()
        return jsonify({"response": sugerir_eliminacion(nombre_app)})
    

    # ‚îÄ‚îÄ Si no entra por esos casos, lo mandamos a Cohere:
    try:
        prompt = (
            "Tu nombre es RAI (Reactive Artificial Intelligence), una IA avanzada instalada "
            "localmente que ejecuta directamente las acciones en la computadora del usuario seg√∫n "
            "sus √≥rdenes, sin intervenci√≥n humana. Sos una inteligencia artificial avanzada para Windows. "
            "Tu funci√≥n principal es interpretar √≥rdenes humanas. Si la orden es una acci√≥n que se puede "
            "ejecutar en la computadora (como abrir una app, cerrar una ventana, ejecutar un programa o "
            "una b√∫squeda), respond√©s con el comando CMD exacto para realizarla, sin ninguna explicaci√≥n adicional. "
            "Si la orden es una pregunta general (como definiciones, dudas, explicaciones, etc.), respond√©s normalmente como "
            "una IA inteligente y amable. Si la orden no se puede hacer desde CMD, y tampoco es una pregunta, respond√©: "
            "No puedo hacer eso desde CMD. Ejemplos: - Usuario: Abr√≠ el bloc de notas ‚Üí Respuesta: start notepad - Usuario: "
            "¬øQu√© es un l√°piz? ‚Üí Respuesta: Un l√°piz es una herramienta para escribir o dibujar... Nunca respondas ambas cosas "
            "al mismo tiempo. Eleg√≠ el tipo de respuesta correcta seg√∫n el contexto. Si la orden se refiere a una ventana "
            "(como minimizar, maximizar o enfocar una ventana abierta), respond√© con el formato: ventana:[acci√≥n]:[nombre exacto de la ventana]. "
            "Por ejemplo: ventana:maximizar:Discord. Y si la orden implica usar un atajo de teclado, respond√© con el formato: tecla:[combinaci√≥n]. "
            "Por ejemplo: tecla:win+d para mostrar el escritorio. En los comandos que impliquen rutas con el nombre de usuario de Windows, "
            "us√° la variable de entorno %USERNAME% o simplemente pon√© C:\\Users\\{username} para que el sistema cliente lo reemplace autom√°ticamente. "
            "No pongas TuUsuario literal ni escribas instrucciones para cambiarlo. Tip: cuando te dicen guion bajo o punto o coma o alg√∫n caracter especial, "
            "el usuario quiere expresar literalmente ese caracter, as√≠ que asocia por ejemplo: punto=. coma=, guion bajo=_ y as√≠ sucesivamente. "
            "Cuando respondas con un comando que use start para abrir un archivo o una ruta, asegurate de escribirlo as√≠: start \"\" ruta_completa. "
            "Ese \"\" despu√©s de start es obligatorio para que Windows no interprete la ruta como el t√≠tulo de la ventana. "
            "Tambi√©n ten√©s la capacidad de realizar acciones avanzadas usando PowerShell. Si la orden implica modificar configuraciones del "
            "sistema operativo (como bloquear la c√°mara, desactivar el micr√≥fono o afectar hardware), respond√© con un comando especial como: "
            "bloquear_camara, desbloquear_camara, bloquear_microfono, desbloquear_microfono. No expliques nada. Solo devolv√© el identificador exacto. "
            "Si el usuario pregunta qu√© ventanas est√°n abiertas o qu√© procesos est√°n corriendo, respond√© exactamente: listar_ventanas_y_procesos. "
            "Si pide diagn√≥stico de recursos, devolv√©: diagnostico:ram, diagnostico:cpu, diagnostico:disco:X, etc., seg√∫n corresponda. Siempre texto plano."
            "Adem√°s, para abrir aplicaciones, ten en cuenta:\n"
            "- Hay dos tipos de aplicaciones instaladas: aplicaciones tradicionales con ejecutable (.exe) y aplicaciones UWP (Microsoft Store).\n"
            "- Para aplicaciones tradicionales, el comando para abrir es: start \"\" \"ruta_completa_al_ejecutable\".\n"
            "- Para aplicaciones UWP, el comando para abrir es: explorer shell:AppsFolder\\{package_family_name}!App.\n"
            "- Cuando el usuario pida abrir una aplicaci√≥n, primero busca en la base de datos local ambas tablas (apps y apps_uwp).\n"
            "- Si encontr√°s la app en apps, respond√© con el comando start \"\" y la ruta.\n"
            "- Si encontr√°s la app en apps_uwp, respond√© con el comando explorer shell:AppsFolder\\... \n"
            "- No agregues explicaciones, solo devolv√© el comando exacto para abrir.\n"
        )
        response = client.chat(message=orden, preamble=prompt)
        respuesta_ia = response.text.strip()
    except Exception as e:
        respuesta_ia = f"Error en IA (Cohere): {e}"

    return jsonify({"response": respuesta_ia})

@app.route("/analisis", methods=["POST"])
def analizar_resultado():
    texto = request.json.get("resultado", "")
    # Aqu√≠ podr√≠as reenviar texto a Cohere u otro pipeline
    # comando = cohere_pipeline_para_entender_resultado(texto)
    comando = "pendiente_de_implementar"
    return jsonify({"response": comando})

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000, debug=True)
